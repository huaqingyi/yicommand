{"version":3,"sources":["core/StoreCore.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,kDAA2B;AAG3B,wDAAgC;AAChC,kDAA2B;AAC3B,kDAAsB;AAEtB,gBAAM,CAAC,QAAQ,CAAC;IACZ,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,MAAM;IACb,OAAO,EAAE,MAAM;IACf,MAAM,EAAE,KAAK;IACb,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,QAAQ;IACd,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,KAAK;CACf,CAAC,CAAC;AAEH;IAUI;QACI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IATa,kBAAQ,GAAtB;QACI,IAAI,CAAC,SAAS,CAAC,KAAK;YAAE,SAAS,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC;QACjD,OAAO,SAAS,CAAC,KAAK,CAAC;IAC3B,CAAC;IAQD,2BAAO,GAAP,UAAQ,WAAqB,EAAE,OAAwB;QAAvD,mBAoCC;QAnCG,IAAI,CAAC,GAAmB,EAAE,OAAO,EAAE,OAAO,EAAE,CAAA;QAC5C,IAAI,OAAO;YAAE,CAAC,GAAG,OAAO,CAAC;QACzB,OAAO,IAAI,OAAO,CAAC,UAAA,CAAC;YAChB,IAAI,CAAC,CAAC,OAAO,EAAE;gBACX,gBAAM,CAAC,CAAC,CAAC,OAAO,EAAE,UAAC,GAAG,EAAE,IAAI;oBACxB,IAAI,GAAG,EAAE;wBACL,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;wBAC7C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBACpB;yBAAM;wBACH,OAAO,CAAC,GAAG,CAAU,IAAK,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC;wBAC9C,CAAC,CAAC,IAAI,CAAC,CAAC;qBACX;gBACL,CAAC,CAAC,CAAA;aACL;iBAAM;gBACH,CAAC,CAAC,IAAI,CAAC,CAAA;aACV;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;YACR,mBAAO,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAC3B,OAAO,gBAAC,CAAC,GAAG,CAAC,OAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,GAAG;gBACjC,IAAI,IAAI,GAAG,EAAE,CAAC;gBACd,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE;oBACnB,IAAI,gBAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;wBAAE,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;;wBACjD,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC;oBACvB,IAAI,IAAI;wBAAE,IAAI,GAAG,MAAI,IAAI,MAAG,CAAA;iBAC/B;gBACD,IAAI,MAAM,GAAG,MAAI,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,YAAO,GAAG,SAAI,IAAM,CAAC;gBACrD,mBAAO,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;YACR,mBAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,IAAI,GAAG,IAAU,WAAY,CAAC;YAClC,OAAO,gBAAC,CAAC,GAAG,CAAC,OAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,GAAG;gBACjC,IAAI,mBAAO,CAAC,GAAG,CAAC;oBAAE,IAAI,CAAC,GAAG,CAAC,CAAC,mBAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yBAAK,GAAL,UAAM,MAAc,EAAE,OAAqB;;QACvC,IAAI,CAAC,QAAQ,gBACN,IAAI,CAAC,QAAQ,eACf,MAAM,IAAG,OAAO,MACpB,CAAA;IACL,CAAC;IACL,gBAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,8BAAS","file":"../../core/StoreCore.js","sourcesContent":["import colors from 'colors'\r\nimport { CommandOptions } from '../decorators'\r\nimport { TaskOptions } from '../decorators/Task'\r\nimport program from 'commander';\r\nimport figlet from 'figlet'\r\nimport _ from 'lodash'\r\n\r\ncolors.setTheme({\r\n    silly: 'rainbow',\r\n    input: 'grey',\r\n    verbose: 'cyan',\r\n    prompt: 'red',\r\n    info: 'green',\r\n    data: 'blue',\r\n    help: 'cyan',\r\n    warn: 'yellow',\r\n    debug: 'magenta',\r\n    error: 'red'\r\n});\r\n\r\nexport class StoreCore {\r\n    public static _this: StoreCore;\r\n\r\n    public static register(): StoreCore {\r\n        if (!StoreCore._this) StoreCore._this = new this;\r\n        return StoreCore._this;\r\n    }\r\n\r\n    private tasksOpt: { [key: string]: TaskOptions | undefined };\r\n\r\n    constructor() {\r\n        this.tasksOpt = {};\r\n    }\r\n\r\n    command(constructor: Function, context?: CommandOptions) {\r\n        let c: CommandOptions = { version: '1.0.0' }\r\n        if (context) c = context;\r\n        return new Promise(r => {\r\n            if (c.context) {\r\n                figlet(c.context, (err, data) => {\r\n                    if (err) {\r\n                        console.log('Something went wrong...'.error);\r\n                        console.dir(err);\r\n                    } else {\r\n                        console.log((<string>data)[c.color || 'red']);\r\n                        r(data);\r\n                    }\r\n                })\r\n            } else {\r\n                r(true)\r\n            }\r\n        }).then(resp => {\r\n            program.version(c.version);\r\n            return _.map(this.tasksOpt, (opt, key) => {\r\n                let opts = '';\r\n                if (opt && opt.option) {\r\n                    if (_.isArray(opt.option)) opts = opt.option.join(',')\r\n                    else opts = opt.option;\r\n                    if (opts) opts = `[${opts}]`\r\n                }\r\n                let option = `-${key.slice(0, 1)}, --${key} ${opts}`;\r\n                program.option(option, opt && opt.explain);\r\n            });\r\n        }).then(resp => {\r\n            program.parse(process.argv);\r\n            let mode = new (<any>constructor);\r\n            return _.map(this.tasksOpt, (opt, key) => {\r\n                if (program[key]) mode[key](program[key]);\r\n            });\r\n        });\r\n    }\r\n\r\n    tasks(method: string, context?: TaskOptions) {\r\n        this.tasksOpt = {\r\n            ...this.tasksOpt,\r\n            [method]: context\r\n        }\r\n    }\r\n}"]}
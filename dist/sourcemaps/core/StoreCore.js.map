{"version":3,"sources":["core/StoreCore.ts"],"names":[],"mappings":"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","file":"../../core/StoreCore.js","sourcesContent":["import colors from 'colors'\nimport { CommandOptions } from '../decorators'\nimport { TaskOptions } from '../decorators/Task'\nimport program from 'commander';\nimport figlet from 'figlet'\nimport _ from 'lodash'\n\ncolors.setTheme({\n    silly: 'rainbow',\n    input: 'grey',\n    verbose: 'cyan',\n    prompt: 'red',\n    info: 'green',\n    data: 'blue',\n    help: 'cyan',\n    warn: 'yellow',\n    debug: 'magenta',\n    error: 'red'\n});\n\nexport class StoreCore {\n    public static _this: StoreCore;\n\n    public static register(): StoreCore {\n        if (!StoreCore._this) StoreCore._this = new this;\n        return StoreCore._this;\n    }\n\n    private tasksOpt: { [key: string]: TaskOptions | undefined };\n    private execsOpt: { [key: string]: { context: string; description?: string } };\n    private argsOpt: { [key: string]: string };\n\n    constructor() {\n        this.tasksOpt = {};\n        this.execsOpt = {};\n        this.argsOpt = {};\n    }\n\n    async command(constructor: any, context?: CommandOptions) {\n        let c: CommandOptions = { version: '1.0.0' }\n        if (context) c = context;\n        await new Promise(r => {\n            if (c.context) {\n                figlet(c.context, (err, data) => {\n                    if (err) {\n                        console.log((<any>'Something went wrong...').error);\n                        console.dir(err);\n                    } else {\n                        console.log((<any>data)[c.color || 'red']);\n                        r(data);\n                    }\n                })\n            } else {\n                r(true)\n            }\n        })\n        let mode = new (<any>constructor);\n\n        await program.version(c.version);\n        await _.map(this.execsOpt, (v, k) => {\n            if (v.description) {\n                program.command(v.context).description(v.description).action((...args: any[]) => mode[k].apply(mode, args));\n            } else {\n                program.command(v.context).action((...args: any[]) => mode[k].apply(mode, args));\n            }\n        });\n\n        await _.map(this.argsOpt, (v, k) => {\n            program.arguments(v).action((...args: any[]) => mode[k].apply(mode, args));\n        });\n\n        await _.map(this.tasksOpt, (opt, key) => {\n            let option = `-${key.slice(0, 1)}, --${key} [${key}]`;\n            program.option(option, opt && opt.explain);\n        });\n\n        await program.parse(process.argv);\n\n        return await _.map(this.tasksOpt, (opt, key) => {\n            if (program[key]) mode[key].apply(mode, [program[key]]);\n        });\n    }\n\n    execs(method: string, context: string, description?: string) {\n        this.execsOpt[method] = { context, description };\n    }\n\n    tasks(method: string, context?: TaskOptions) {\n        this.tasksOpt = {\n            ...this.tasksOpt,\n            [method]: context\n        }\n    }\n\n    args(methods: string, context: string) {\n        this.argsOpt[methods] = context;\n    }\n}"]}
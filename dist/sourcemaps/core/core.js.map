{"version":3,"sources":["core/core.ts"],"names":[],"mappings":"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","file":"../../core/core.js","sourcesContent":["import { isFunction, map } from 'lodash';\nimport { CommanderOption, YCommander } from '../decorators/commander';\nimport commander, { command, createCommand } from 'commander';\nimport colors from 'colors';\nimport { textSync } from 'figlet';\n\n// tslint:disable-next-line:interface-name\nexport interface CoreImpl {\n    input(...props: any[]): void;\n    input<T>(...props: any[]): T;\n    output(...props: any[]): void;\n    output<T>(...props: any[]): T;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class CommanderCore implements CoreImpl {\n\n    public input(...props: any[]) {\n        throw new Error(`not extends input ...`);\n    }\n\n    public output(...props: any[]) {\n        throw new Error(`not extends output ...`);\n    }\n}\n\nexport type CoreClass<Y> = (new (...args: any[]) => Y & CommanderCore) & typeof CommanderCore;\n\n// tslint:disable-next-line:max-classes-per-file\nexport class DICore {\n    public commanders: Array<CoreClass<CommanderCore>>;\n\n    constructor() {\n        this.commanders = [];\n    }\n\n    public proxyClass(target: any, ctx: any, config: any = {}) {\n        return new Proxy(new target(ctx), {\n            get(t: any, name: string) {\n                if (t[name]) { return t[name]; }\n                const type = Reflect.getMetadata('design:type', t, name);\n                const value = config[name];\n                if (type === Array && typeof (value) === 'string') {\n                    return value.split(',');\n                }\n                return value;\n            },\n            set(t: any, name: string, value: any) {\n                t[name] = value;\n                return true;\n            }\n        });\n    }\n\n    public async mappingCommander(target: any, program: commander.Command, ctx: any = {}) {\n        const comm: YCommander = target.prototype;\n\n        map(comm.options, (desc, key) => {\n            const type = Reflect.getMetadata('design:type', comm, key);\n            if (desc.required === false) {\n                return program.option(\n                    `-${key.substring(0, 1)}, --${key} ${this.formatTypes(type, key)}`, desc.description\n                );\n            } else {\n                return program.requiredOption(\n                    `-${key.substring(0, 1)}, --${key} ${this.formatTypes(type, key)}`, desc.description\n                );\n            }\n        });\n\n        return await Promise.all(map(comm.actions, async (a) => {\n            const cs = command(a.name);\n            cs.description(a.description);\n            if (a.children === true) {\n                const returntype = await a.action.apply(comm);\n                const idx = this.commanders.indexOf(returntype);\n                if (idx !== -1) {\n                    await this.mappingCommander(returntype, cs, this.proxyClass(target, program, program));\n                } else {\n                    throw new Error(`子命令绑定错误: ${target.name}->${a.name}->${returntype.name} ...`);\n                }\n            } else {\n                cs.action((config: any) => {\n                    const commIns = this.proxyClass(target, ctx, config.parent || {});\n                    return a.action.apply(commIns, [commIns]);\n                });\n            }\n            return program.addCommand(cs);\n        }));\n    }\n\n    public formatTypes(type: any, name: string) {\n        switch (type) {\n            case String: return `<${name}>`;\n            case Array: return `[${name}]`;\n            default: return `<${name}>`;\n        }\n    }\n\n    public async bootstrap(config: CommanderOption, target: CoreClass<YCommander>) {\n\n        let text = await config.context;\n        if (isFunction(config.context)) { text = await config.context(); }\n        console.log((colors as any)[config.color || 'red'](await textSync(text as string, config)));\n\n        const v = isFunction(config.version) ? await config.version() : await config.version;\n        const program = createCommand();\n        program.version(v);\n        await this.mappingCommander(target, program);\n        await program.parse(process.argv);\n    }\n}\n\nexport const DI = new DICore();\n"]}